//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Main/CharacterController/Input/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Main.FinalCharacterController
{
    public partial class @PlayerControlls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControlls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovementMap"",
            ""id"": ""3848917d-e928-4003-828d-46499c9427a4"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5a99eda9-18e7-4668-8828-a44669a2a5f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""fd644fb6-81f3-4b83-874c-9a454821e2f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleSprint"",
                    ""type"": ""Button"",
                    ""id"": ""faeeda7d-2e32-4fee-a4f2-4130967a6f93"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleFirstPerson"",
                    ""type"": ""Button"",
                    ""id"": ""76092ea4-5677-4192-9539-70a115eefd8f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f70814b7-f9ea-4911-b708-c50b955c4696"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""953309e4-bc2b-4e39-9c06-d5269026e660"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fd903fa9-31d7-4173-a02f-3b19710fada5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""77bf9dd6-c46e-4d6c-bfa9-e240bac317f4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""797953b7-f1be-4194-ae65-7fd58251f944"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""8dc4a192-833f-471d-b73c-a52de63854b1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7ba53fdb-5eb7-45d5-acf2-11ea84c988df"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fd691c85-b479-44c5-91f1-4167c1d0fded"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9f632955-d013-480b-b9d9-632b38dc4b57"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c580a3c-8216-4926-a80a-0185c68f6d18"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""46c153b8-db67-4231-899f-1df62c7a918e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f1dddc5-90f9-447d-9316-1bbe28dbe659"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d608be39-54ef-40be-8ff1-b0c246496e19"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleFirstPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMovementMap
            m_PlayerMovementMap = asset.FindActionMap("PlayerMovementMap", throwIfNotFound: true);
            m_PlayerMovementMap_Movement = m_PlayerMovementMap.FindAction("Movement", throwIfNotFound: true);
            m_PlayerMovementMap_Look = m_PlayerMovementMap.FindAction("Look", throwIfNotFound: true);
            m_PlayerMovementMap_ToggleSprint = m_PlayerMovementMap.FindAction("ToggleSprint", throwIfNotFound: true);
            m_PlayerMovementMap_ToggleFirstPerson = m_PlayerMovementMap.FindAction("ToggleFirstPerson", throwIfNotFound: true);
        }

        ~@PlayerControlls()
        {
            UnityEngine.Debug.Assert(!m_PlayerMovementMap.enabled, "This will cause a leak and performance issues, PlayerControlls.PlayerMovementMap.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMovementMap
        private readonly InputActionMap m_PlayerMovementMap;
        private List<IPlayerMovementMapActions> m_PlayerMovementMapActionsCallbackInterfaces = new List<IPlayerMovementMapActions>();
        private readonly InputAction m_PlayerMovementMap_Movement;
        private readonly InputAction m_PlayerMovementMap_Look;
        private readonly InputAction m_PlayerMovementMap_ToggleSprint;
        private readonly InputAction m_PlayerMovementMap_ToggleFirstPerson;
        public struct PlayerMovementMapActions
        {
            private @PlayerControlls m_Wrapper;
            public PlayerMovementMapActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerMovementMap_Movement;
            public InputAction @Look => m_Wrapper.m_PlayerMovementMap_Look;
            public InputAction @ToggleSprint => m_Wrapper.m_PlayerMovementMap_ToggleSprint;
            public InputAction @ToggleFirstPerson => m_Wrapper.m_PlayerMovementMap_ToggleFirstPerson;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMovementMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMovementMapActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerMovementMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @ToggleSprint.started += instance.OnToggleSprint;
                @ToggleSprint.performed += instance.OnToggleSprint;
                @ToggleSprint.canceled += instance.OnToggleSprint;
                @ToggleFirstPerson.started += instance.OnToggleFirstPerson;
                @ToggleFirstPerson.performed += instance.OnToggleFirstPerson;
                @ToggleFirstPerson.canceled += instance.OnToggleFirstPerson;
            }

            private void UnregisterCallbacks(IPlayerMovementMapActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @ToggleSprint.started -= instance.OnToggleSprint;
                @ToggleSprint.performed -= instance.OnToggleSprint;
                @ToggleSprint.canceled -= instance.OnToggleSprint;
                @ToggleFirstPerson.started -= instance.OnToggleFirstPerson;
                @ToggleFirstPerson.performed -= instance.OnToggleFirstPerson;
                @ToggleFirstPerson.canceled -= instance.OnToggleFirstPerson;
            }

            public void RemoveCallbacks(IPlayerMovementMapActions instance)
            {
                if (m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerMovementMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerMovementMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerMovementMapActions @PlayerMovementMap => new PlayerMovementMapActions(this);
        public interface IPlayerMovementMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnToggleSprint(InputAction.CallbackContext context);
            void OnToggleFirstPerson(InputAction.CallbackContext context);
        }
    }
}
